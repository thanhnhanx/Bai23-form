@page "/register"
<PageTitle>Register</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-6">
            <h3>Register Form</h3>
            @* editform của C# cần model *@
            <EditForm Model="@user" OnValidSubmit="HandleSubmit" OnInValidSubmit="HandleError">
                @* Valid submit: thỏa hết điều kiện thì gọi HandleSubmit *@
                @* InvalidSubmit: khi không thỏa hết các điều kiện thì gọi hàm *@
                <DataAnnotationsValidator /> 
                <ValidationSummary />
                @* Phải có hàng này để kích hoạt cái kiểm tra *@
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" class="form-control" id="username" @bind="@user.Username" />
                    <ValidationMessage For="@(() => user.Username)" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email address</label>
                    <input type="email" class="form-control" id="email" @bind="@user.Email" />
                    <ValidationMessage For="@(() => user.Email)" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="password" @bind="@user.Password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                <div class="mb-3">
                    <p>Gender</p>
                    <div class="form-check form-check-inline">
                        <input id="nam" class="form-check-input" type="radio" name="gender" value="false"
                            checked="@user.Gender.Equals(false)" @onchange="() => ChangeGender(false)" />
                        <label for="nam" class="form-check-label">Nam</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input id="nu" class="form-check-input" type="radio" name="gender" value="true"
                            checked="@user.Gender.Equals(true)" @onchange="() => ChangeGender(true)" />
                        <label for="nu" class="form-check-label">Nữ</label>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">City</label>
                    <select class="form-control" @bind="@user.City">
                        <option value="Việt Nam">Việt Nam</option>
                        <option value="Nhật Bản">Nhật Bản</option>
                        <option value="Campuchia">Campuchia</option>
                    </select>
                </div>
                <div class="mb-3">
                    <p>Sở thích</p>
                    @foreach (var hobby in allHobbies)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" checked=@user.Hobbies.Contains(hobby) @onchange="(e)=>ChangeHobby(hobby, e.Value)" />
                            <label class="form-check-label">@hobby</label>
                        </div>
                    }
                </div>
                <div class="mb-3">
                    <button class="btn btn-primary">Register</button>
                </div>

            </EditForm>
        </div>
        <div class="col-6">
            <h3>Show thông tin</h3>
            <p>Username: @user.Username </p>
            <p>Email: @user.Email</p>
            <p>Password: @user.Password</p>
            <p>Gender: @user.Gender</p>
            <p>City: @user.City</p>
            <p>Sở thích: @string.Join(", ", user.Hobbies)</p>
        </div>
    </div>
</div>
@code {

    private List<string> allHobbies = new List<string>() {
"Ăn uống", "Ngủ", "Chơi game", "Du lịch" };
    private UserRegisterViewModel user = new UserRegisterViewModel();
    @* đổi giới tính *@
    private void ChangeGender(bool gender){
        user.Gender = gender;
    }
    @* Hàm lưu thông tin *@
    private void HandleSubmit() {
        @* Lưu thông tin *@
        Console.WriteLine("Username: " + user.Username);
        Console.WriteLine("Email: " + user.Email);
        Console.WriteLine("Password: " + user.Password);
    }


    private void ChangeHobby(string hobby, object checkedValue)
    {   // kiểm tra xem có phải true hoặc là false thì isChecked là đúng, sau đó mới kiểm tra giá trị của nó
        bool isChecked = (bool)checkedValue;
        if (isChecked)
        {
            if (!user.Hobbies.Contains(hobby))
            {
                user.Hobbies.Add(hobby);
            }
        }
        else
        {
            if (user.Hobbies.Contains(hobby))
            {
                user.Hobbies.Remove(hobby);
            }
        }
    }
    @* hàm lỗi *@
    public void HandleError()
    {
        Console.WriteLine("Có lỗi xảy ra");
    }





}
